[
    {
        "id": 1,
        "titulo": "O que é o React?",
        "texto": "Fonte: <https://kenzie.com.br/blog/react/> \n\n React JS é uma biblioteca JavaScript para a criação de interfaces de usuário — ou UI (user interface).\n\nCriado em 2011 pelo time do Facebook, o React surgiu com o objetivo de otimizar a atualização e a sincronização de atividades simultâneas no feed de notícias da rede social, entre eles chat, status, listagem de contatos e outros.A princípio, todas essas atividades, chamadas de estados, tinham uma descrição muito complexa.\n\n Com o React, esta descrição torna-se mais simples, bem como também é simplificada a conexão entre HTML, CSS e JavaScript e todos os componentes de uma página.Por ter demonstrado grande eficiência, nos anos que se seguiram o React foi incorporado à interface de outras redes sociais do grupo, como o Instagram e, em 2013, seu código foi aberto à comunidade, dando início a sua popularização.Hoje, o React é uma das mais prestigiadas bibliotecas de JavaScript do mercado.\n\nO React é uma biblioteca front-end e tem como um de seus objetivos facilitar a conexão entre diferentes partes de uma página, portanto seu funcionamento acontece através do que chamamos de componentes.Em outras palavras, podemos imaginar que o React divide uma tela em diversos componentes para, então, trabalhar sobre eles de maneira individual.\n\nOs componentes são utilizados para reaproveitamento de código e padronização de interface.Isso torna o React uma tecnologia muito flexível para a solução de problemas e para a construção de interfaces reutilizáveis, uma vez que cada um destes componentes pode ser manipulado de maneira distinta. \n\n"
    },
    {
        "id": 2,
        "titulo": "O que é JavaScript?",
        "texto": "> Fonte: <https://developer.mozilla.org/pt-BR/docs/Web/JavaScript> \n\n JavaScript® (às vezes abreviado para JS) é uma linguagem leve, interpretada e baseada em objetos com funções de primeira classe, mais conhecida como a linguagem de script para páginas Web, mas usada também em vários outros ambientes sem browser, tais como node.js, Apache CouchDB e Adobe Acrobat.\n\n O JavaScript é uma linguagem baseada em protótipos, multi-paradigma e dinâmica, suportando estilos de orientação a objetos, imperativos e declarativos (como por exemplo a programação funcional).\n\n Desde 2012, todos os navegadores modernos possuem suporte total ao ECMAScript 5.1. Navegadores mais antigos suportam pelo menos ECMAScript 3.\n\n Em 17 de Junho de 2015, a ECMA International publicou a sexta versão do ECMAScript, que é oficialmente chamado de ECMAScript 2015, e foi inicialmente conhecido como ECMAScript 6 ou ES6. Desde então, as especificações do ECMAScript são lançadas anualmente. Essa documentação faz referência à última versão de referência, que atualmente é a ECMAScript 2018.Não se deve confundir o JavaScript com a linguagem de programação Java.\n\n Tanto Java quanto JavaScript são marcas registradas da Oracle nos Estados Unidos da América e em outros países. No entanto, as duas linguagens de programação possuem sintaxe, semânticas e usos muito diferentes.\n\n"
    },
    {
        "id": 3,
        "titulo": "Typescript",
        "texto": "> Fonte: <https://www.typescriptlang.org/pt/docs/handbook/typescript-from-scratch.html> \n\n Nós dissemos antes que algumas linguagens não permitiriam esses programas bugados nem serem executados.\n\n Detecção de erros sem execução do código é chamada de verificação estática. Determinar o que é um erro e o que não é baseado nos tipos dos valores sendo operados é chamado de verificação estática de tipos.\n\nTypeScript não considera qualquer código JavaScript como um erro por sua sintaxe. Isso significa que você pode pegar qualquer código funcional JavaScript e colocar em um arquivo TypeScript sem se preocupar em como está escrito.\n\n É possível que você realmente queira dividir um número por um array, talvez só para ver o que acontece, mas na maior parte do tempo isso é um erro de programação. O verificador de tipo do TypeScript é desenvolvido para permitir programas corretos enquanto previne quantos erros comuns forem possíveis. \n\nSe você move algum código de um arquivo JavaScript para um arquivo TypeScript, você pode ver erros de tipo dependendo de como o código é escrito. Esses podem ser problemas legítimos com o código ou TypeScript sendo conservador em excesso.\n\n "
    },
    {
        "id": 4,
        "titulo": "VueJS & Svelte",
        "texto": "> Fontes: <https://br.vuejs.org/v2/guide/index.html>  <https://svelte.dev/docs> \n\n Vue (pronuncia-se /vjuː/, como view, em inglês) é um framework progressivo para a construção de interfaces de usuário. Ao contrário de outros frameworks monolíticos, Vue foi projetado desde sua concepção para ser adotável incrementalmente. \n\nA biblioteca principal é focada exclusivamente na camada visual (view layer), sendo fácil adotar e integrar com outras bibliotecas ou projetos existentes. Por outro lado, Vue também é perfeitamente capaz de dar poder a sofisticadas Single-Page Applications quando usado em conjunto com ferramentas modernas e bibliotecas de apoio.\n\n \n\n Svelte é uma nova abordagem radical para a construção de interfaces de usuário. \n\nEnquanto frameworks tradicionais como React e Vue fazem a maior parte de seu trabalho no navegador, o Svelte transforma esse trabalho em uma etapa de compilação que acontece quando você cria seu aplicativo.\n\n "
    },
    {
        "id": 5,
        "titulo": "PostgreSQL - História",
        "texto": "> Fonte: <https://www.devmedia.com.br/introducao-ao-postgresql/6390>\n\n É o que chamamos de SGBDRe (alguns o chamam de objeto-relacional), ou seja, é um Sistema de Gerência de Bancos de dados Relacional estendido e livre porque ele adota uma abordagem relacional. \n\nA abordagem em um SGBD é caracterizada pela forma como os dados estão organizados nesse SGBD. Em um SGBD relacional, os dados estão organizados em forma de tabelas (linhas e colunas) e suas relações (chaves estrangeiras). Notem que essa é uma definição bastante simplista de um banco de dados relacional. \n\nNo meu convívio com profissionais da área de TI, tenho percebido que nem todos gostam muito de história, preferindo artigos mais técnicos, até mesmo pelo pouco tempo que, na maioria das vezes, temos disponível. Entretanto, vivemos um momento onde muitas empresas, inclusive públicas, tem realizado estudos para migração de bases de dados para software livre, seja por motivos políticos ou por redução de custo, o fato é que, conhecer um pouco da história do sistema e verificar a seriedade dos estudos que foram realizados para o seu desenvolvimento, certamente nos fornece mais subsídios para essa tomada de decisão, sem falar que enriquece as apresentações dos profissionais da área. \n\nCom relação à essa história, perceberemos que alguns anos de esforços foram, e continuam sendo, empregados para que o PostgreSQL se consolide, a cada dia, como o mais avançado SGBD livre. \n\nO “pontapé” inicial aconteceu na universidade de Berkeley na Califórnia (1973), quando Michael Stonebraker e Eugene Wong, decidem iniciar um projeto de Banco de Dados Relacional e desenvolvem o Ingres. Após isso, Stonebraker sai do projeto para comercializar o Ingres, mas volta logo em seguida iniciando o projeto do post-Ingres, que buscava resolver o que considerava ser limitações do modelo relacional. Dessa forma, o post-Ingres começou a ganhar características de um SGBD estendido ou objeto-relacional. Posteriormente, o nome do sistema passou de post-Ingres (após o Ingres) para postgres. \n\nO postgres teve entre os seu financiadores organizações como a DARPA (Agência de Pesquisas em Projetos Avançados), e o ARO (Escritório de Pesquisas do Exército).A primeira versão funcional (versão 1) foi liberada para um grupo pequeno de usuários em junho de 1989. Após a liberação da versão 4 (1993), quando o sistema já contava com uma boa popularidade, o projeto foi oficialmente abandonado pela Universidade de Berkeley e sua continuação só foi possível porque o mesmo estava sob uma licença BSD .\n\n Em 1994, dois estudantes de Berkeley, Andrew Yu e Jolly Chen, adicionaram um interpretador SQL ao postgres, deram ao projeto o nome de Postgres95 e divulgaram seu código pela Internet. Com o código aberto (open source), o Postgres95 estrapolou as fronteiras da universidade permitindo que outros desenvolvedores se integrassem ao projeto. Logo, em 1996, o projeto foi renomeado para PostgreSQL, que refletia melhor a nova linguagem de consulta ao banco de dados, o SQL. Desde então, o PostgreSQL não parou de crescer, sendo mantido por um grupo de desenvolvedores e de voluntários de todo o mundo.A partir da versão 6.0, o agora PostgreSQL, passou a suportar o MVCC (Multiversion Concurrency Control – Controle de Concorrência Multiversões).\n\nUm outro marco na história do PostgreSQL aconteceu com o lançamento em janeiro de 2005 da versão 8.0, que trouxe, entre outras novidades, o suporte nativo para Microsoft Windows (até então eram utilizados emuladores para executar o PostgreSQL no Windows).\n\nHoje, muitas empresas, que tem feito estudos sérios sobre a adoção de um SGBD livre, tem encontrado no PostgreSQL uma excelente ferramenta para substituição de SGBDs proprietários. \n\nO maior obstáculo para sua adoção, entretanto, tem sido a falta de mão de obra qualificada e o “lobby” das empresas detentoras de sistemas proprietários.  \n\n "
    },
    {
        "id": 6,
        "titulo": "HTML. De CSS para SASS",
        "texto": "> Fonte: <https://developer.mozilla.org/pt-BR/docs/Web/HTML> <https://sass-lang.com/guide>\n\n HTML (Linguagem de Marcação de HiperTexto) é o bloco de construção mais básico da web. Define o significado e a estrutura do conteúdo da web. Outras tecnologias além do HTML geralmente são usadas para descrever a aparência/apresentação (CSS) ou a funcionalidade/comportamento (JavaScript) de uma página da web. \n\nHipertexto refere-se aos links que conectam páginas da Web entre si, seja dentro de um único site ou entre sites. Links são um aspecto fundamental da web.\n\n Ao carregar conteúdo na Internet e vinculá-lo a páginas criadas por outras pessoas, você se torna um participante ativo na world wide web.\n\nO HTML usa Marcação para anotar texto, imagem e outros conteúdos para exibição em um navegador da Web. \n\nA marcação HTML inclui elementos especiais, como <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <output>, <progress>, <video>, <ul>, <ol>, <li> e muitos outros.\n\nUm elemento HTML é separado de outro texto em um documento por tags, que consistem no nome do elemento entre < e >. O nome de um elemento dentro de uma tag é insensível a maiúsculas e minúsculas. Isto é, pode ser escrito em maiúsculas, minúsculas ou um mistura. Por exemplo, a tag <title> pode ser escrita como <Title>, <TITLE> ou de qualquer outra forma. \n\n\n\n CSS por si só pode ser divertido, mas as folhas de estilo estão ficando maiores, mais complexas e mais difíceis de manter. É aqui que um pré-processador pode ajudar.\n\n O Sass possui recursos que ainda não existem em CSS, como aninhamento, mixins, herança e outros recursos interessantes que ajudam você a escrever CSS robusto e de fácil manutenção.Assim que você começar a mexer no Sass, ele pegará seu arquivo Sass pré-processado e o salvará como um arquivo CSS normal que você pode usar em seu site.\n\nA maneira mais direta de fazer isso acontecer é no seu terminal. Uma vez que o Sass esteja instalado, você pode compilar seu Sass para CSS usando o comando sass. Você precisará informar ao Sass de qual arquivo compilar e para onde enviar o CSS. Por exemplo, executar sass input.scss output.css a partir de seu terminal levaria um único arquivo Sass, input.scss, e compilaria esse arquivo para output.css.\n\nVocê também pode observar arquivos ou diretórios individuais com o sinalizador --watch. O sinalizador de observação diz ao Sass para observar seus arquivos de origem quanto a alterações e recompilar o CSS toda vez que você salvar seu Sass. Se você quiser assistir (em vez de compilar manualmente) seu arquivo input.scss.\n\n "
    },
    {
        "id": 7,
        "titulo": "PHP",
        "texto": "> Fonte: <https://www.devmedia.com.br/php/> \n\n Existem muitas razões para usar o PHP para a programação de aplicações web. Em primeiro lugar, é uma linguagem livre, sem taxas de licenciamento, de modo que o custo de usá-la é mínimo. \n\nAlém disso você tem a liberdade de escolha de sistema operacional e de servidor web.PHP é uma linguagem de programação de código aberto, criada para o desenvolvimento web. Com ela podemos escrever pequenos scripts de forma procedural, utilizar a orientação a objetos ou ainda ambas.O PHP é uma linguagem de script open source de uso geral, desenvolvida especialmente para desenvolvimento web.\n\n Ele possui a vantagem de seus scripts serem executados no lado do servidor, entregando para o cliente geralmente um conjunto de HTML, CSS e JavaScript.\n\nTrata-se de uma linguagem de fácil aprendizado em comparação com outras linguagens, pois é fracamente tipada, ou seja, não é necessário declarar o tipo de dados antes da utilização de uma variável ou constante. \n\n"
    },
    {
        "id": 8,
        "titulo": "Go & Elixir :(",
        "texto": "> Fonte: <https://go.dev> <https://elixir-lang.org> \n\n A linguagem de programação Go é um projeto de código aberto para tornar os programadores mais produtivos.Go é expressivo, conciso, limpo e eficiente. Seus mecanismos de simultaneidade facilitam a escrita de programas que tiram o máximo proveito de máquinas multicore e em rede, enquanto seu novo sistema de tipos permite a construção de programas flexíveis e modulares. \n\nGo compila rapidamente para código de máquina, mas tem a conveniência da coleta de lixo e o poder da reflexão em tempo de execução. É uma linguagem compilada, de tipagem estática e rápida que parece uma linguagem interpretada e tipada dinamicamente.\n\n\n\nElixir é uma linguagem dinâmica e funcional para construir aplicativos escaláveis ​​e de fácil manutenção.Elixir é executado na VM Erlang, conhecida por criar sistemas de baixa latência, distribuídos e tolerantes a falhas.\n\n Esses recursos e as ferramentas Elixir permitem que os desenvolvedores sejam produtivos em vários domínios, como desenvolvimento web, software incorporado, pipelines de dados e processamento multimídia, em uma ampla variedade de setores. \n\n"
    },
    {
        "id": 9,
        "titulo": "Portugol",
        "texto": "> Fonte: <https://www.jdevtreinamento.com.br/portugol-introducao-ao-pseudocodigo/> \n\n “Portugol, também conhecido como Português estruturado, é um pseudocódigo escrito em português”. \n\nApesar de sucinta, esta definição da Wikipédia cumpre o seu papel de elucidar a ideia de que, apesar de não ser uma linguagem de computador real, o Portugol auxilia de forma didática no desenvolvimento de algoritmos. \n\nNo entanto, sem a preocupação com a sintaxe correta do Java, ou qualquer outra linguagem.Apesar de não ser uma linguagem de computador real, o Portugol ou português estruturado, nos possibilitará escrever nossos pseudocódigos obedecendo a estrutura de algoritmos. Estrutura esta a partir da qual escreveremos instruções de entrada, saída e processamento dos dados.\n\n Tais instruções representam as ações que ocorrem em um sistema real.Começar com o Portugol vai auxiliar você, programador iniciante, a formar sua mentalidade de programador. E vai ajudá-lo a entender os princípios fundamentais que dão sustentação a aprendizagem de lógica de programação e algoritmos. \n\n"
    }
]